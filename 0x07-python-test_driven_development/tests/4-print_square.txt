The ``add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``add_integer`` module:

	>>> print_square = __import__('4-print_square').print_square

Now use it:

	>>> print_square(1)
	#

	>>> print_square(4)
	####
	####
	####
	####

	>>> print_square(10)
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########

	>>> print_square(0)


	>>> print_square(-5)
	Traceback (most recent call last):
	...
	ValueError: size must be >= 0

	>>> print_square(3.5)
	Traceback (most recent call last):
	...
	TypeError: size must be an integer

	>>> print_square(-3.5)
	Traceback (most recent call last):
	...
	TypeError: size must be an integer

	>>> print_square(None)
	Traceback (most recent call last):
	...
	TypeError: size must be an integer

	>>> print_square("non")
	Traceback (most recent call last):
	...
	TypeError: size must be an integer

	>>> print_square()
	Traceback (most recent call last):
	...
	TypeError: print_square() missing 1 required positional argument: 'size'

	>>> print_square(1, 2)
	Traceback (most recent call last):
	...
	TypeError: print_square() takes 1 positional argument but 2 were given

	>>> module_documentation = __import__("4-print_square").__doc__
	>>> print(len(module_documentation) > 0)
	True

	>>> function_documentation = __import__("4-print_square").__doc__
	>>> print(len(function_documentation) > 0)
	True
