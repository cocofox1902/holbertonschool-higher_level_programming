The ``add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``add_integer`` module:

	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Now use it:

	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22]]

	>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	Traceback (most recent call last):
	...
	ValueError: m_a and m_b can't be multiplied

	>>> matrix_mul([[19, -2.5], [3.7, 4.0]], [[1.5, 2.29], [-3, 4.88]])
	[[36.0, 31.31], [-6.449999999999999, 27.993000000000002]]

	>>> matrix_mul([[float("-inf"), 2], [3, -4.5]], [[-1, -2], [3.12, 4]])
	[[inf, inf], [-17.04, -24.0]]

	>>> matrix_mul([[float("inf"), 2], [3, -4.5]], [[-1, -2], [3.12, 4]])
	[[-inf, -inf], [-17.04, -24.0]]

	>>> print(matrix_mul([], [[3, 4]]))
	Traceback (most recent call last):
	...
	ValueError: m_a can't be empty

	>>> print(matrix_mul([[1, 2]], [[]]))
	Traceback (most recent call last):
	...
	ValueError: m_b can't be empty

	>>> print(matrix_mul([[]], [[]]))
	Traceback (most recent call last):
	...
	ValueError: m_a can't be empty

	>>> print(matrix_mul("non", [[3, 4]]))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list

	>>> print(matrix_mul([[1, 2]], "non"))
	Traceback (most recent call last):
	...
	TypeError: m_b must be a list

	>>> print(matrix_mul("non", "non"))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list

	>>> print(matrix_mul(None, None))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list

	>>> print(matrix_mul([1, 2], [[3, 4]]))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list of lists

	>> print(matrix_mul([[1, 2]], [3, 4]))
	Traceback (most recent call last):
	...
	TypeError: m_b must be a list of lists

	>> print(matrix_mul([1, 2], [3, 4]))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list of lists

	>> print(matrix_mul([1, "non"], [[3, 4]]))
	Traceback (most recent call last):
	...
	TypeError: m_a should contain only integers or floats

	>> print(matrix_mul([1, 2], [["non", 4]]))
	Traceback (most recent call last):
	...
	TypeError: m_b should contain only integers or floats

	>> print(matrix_mul([1, "non"], [["non", 4]]))
	Traceback (most recent call last):
	...
	TypeError: m_a should contain only integers or floats

	>> print(matrix_mul([[1, 2, 5], [1, 2]], [[3, 4], [5, 6]]))
	Traceback (most recent call last):
	...
	TypeError: each row of m_a must should be of the same size

	>> print(matrix_mul([[1, 2], [1, 2]], [[3, 4, 5], [5, 6]]))
	Traceback (most recent call last):
	...
	TypeError: each row of m_a must should be of the same size

	>> print(matrix_mul([[1, 2, 5], [1, 2]], [[1, 2, 5], [1, 2]]))
	Traceback (most recent call last):
	...
	TypeError: each row of m_a must should be of the same size

	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3]])
	Traceback (most recent call last):
	...
	TypeError: each row of m_b must be of the same size

	>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	Traceback (most recent call last):
	...
	ValueError: m_a and m_b can't be multiplied

	>>> module_documentation = __import__("100-matrix_mul").__doc__
	>>> print(len(module_documentation) > 0)
	True

	>>> function_documentation = __import__("100-matrix_mul").__doc__
	>>> print(len(function_documentation) > 0)
	True
