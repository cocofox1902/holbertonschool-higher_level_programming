The ``add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``add_integer`` module:

	>>> say_my_name = __import__('3-say_my_name').say_my_name

Now use it:

	>>> say_my_name("John", "Smith")
	My name is John Smith

	>>> say_my_name("John", "Smith Smith")
	My name is John Smith Smith

	>>> say_my_name("John")
	My name is John 

	>>> say_my_name("")
	My name is  

	>>> say_my_name('test', 'file\'')
	My name is test file'

	>>> say_my_name(12)
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

	>>> say_my_name(12.3, "Smith")
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

	>>> say_my_name([12, "4"], "Smith")
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

	>>> say_my_name("John", 12)
	Traceback (most recent call last):
	...
	TypeError: last_name must be a string

	>>> say_my_name("John", 12.3)
	Traceback (most recent call last):
	...
	TypeError: last_name must be a string

	>>> say_my_name("John", ["12", "3"])
	Traceback (most recent call last):
	...
	TypeError: last_name must be a string

	>>> say_my_name(None)
	Traceback (most recent call last):
	...
	TypeError: first_name must be a string

	>>> say_my_name()
	Traceback (most recent call last):
	...
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

	>>> say_my_name("Smith", "string", "test")
	Traceback (most recent call last):
	...
	TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given

	>>> module_documentation = __import__("3-say_my_name").__doc__
	>>> print(len(module_documentation) > 0)
	True

	>>> function_documentation = __import__("3-say_my_name").__doc__
	>>> print(len(function_documentation) > 0)
	True
